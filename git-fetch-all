#!/usr/bin/python3

import argparse
import os

from git import Repo


def print_fetch_info(action, info_iter, heads):
    for info in info_iter:
        head = heads.get(info.ref)
        if head and head.commit != info.commit:
            head.commit = info.commit
            print('{} {} -> {}'.format(action, head, info.ref))
            if info.note:
                print('NOTE: {}'.format(info.note))


if __name__ == '__main__':
    parser = argparse.ArgumentParser('Fetches all branches of all the repositories found under the current directory')
    parser.add_argument('-p', '--pull', action='store_true',
                        help='Pull active branch if the working directory is clean')
    args = parser.parse_args()
    root = os.getcwd()
    for entry in os.listdir('.'):
        path = os.path.join(root, entry)
        if os.path.isdir(path):
            os.chdir(path)
            try:
                repo = Repo(path)
                if repo.bare:
                    continue
                origin = repo.remote('origin')
                if not origin.exists():
                    continue
                heads = {h.tracking_branch(): h for h in repo.heads}
                if args.pull and not repo.is_dirty() and repo.active_branch.tracking_branch():
                    print_fetch_info('Pulled', origin.pull(), heads)
                else:
                    print_fetch_info('Fetched', origin.fetch(), heads)
                print('{} updated\n'.format(path))
            except Exception as ex:
                print('Error while updating {}:\n\t{!s}'.format(path, ex))
